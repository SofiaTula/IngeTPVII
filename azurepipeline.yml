# ===========================================
# COFFEEHUB CI/CD - QA y PRODUCCI√ìN (Azure + MongoDB)
# Con Tests Autom√°ticos Integrados
# ===========================================

trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

variables:
  - group: CoffeeHub-Secrets  
  - name: RESOURCE_GROUP_NAME
    value: 'TPINGSOFT32025'
  - name: azureServiceConnection
    value: 'azure-tp07-connections'
  - name: backendAppNameQA
    value: 'coffehub-Backend-QA'
  - name: frontendAppNameQA
    value: 'coffehub-Front-QA'
  - name: backendAppNameProd
    value: 'coffehub-Backend-PROD'
  - name: frontendAppNameProd
    value: 'coffehub-Front-PROD'

# ==================== STAGE 1: BUILD Y TESTS ====================
stages:
- stage: Build_And_Test
  displayName: "CI: Instalar, Probar y Empaquetar"
  jobs:
  - job: BuildAndTestBackend
    displayName: "üî® Build + Tests Backend"
    steps:
      # ---- Instalar dependencias ----
      - script: |
          echo "üì¶ Instalando dependencias del backend..."
          npm install
        displayName: 'üì¶ Instalar Dependencias Backend'
        workingDirectory: 'coffehub/backend'

      # ---- Ejecutar Tests Unitarios ----
      - script: |
          echo "üß™ Ejecutando tests unitarios con mocks..."
          npm run test:ci
        displayName: 'üß™ Tests Unitarios'
        workingDirectory: 'coffehub/backend'
        continueOnError: false

      # ---- Publicar Resultados de Tests ----
      - task: PublishTestResults@2
        displayName: 'üìã Publicar Resultados de Tests'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit.xml'
          searchFolder: 'coffehub/backend'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Backend Tests'
        condition: succeededOrFailed()

      # ---- Publicar Coverage ----
      - task: PublishCodeCoverageResults@1
        displayName: 'üìä Publicar Code Coverage'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'coffehub/backend/coverage/cobertura-coverage.xml'
          reportDirectory: 'coffehub/backend/coverage'
        condition: succeededOrFailed()

      # ---- Publicar Artefacto Backend ----
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/backend'
          artifact: 'backend-code'
        displayName: "üì¶ Publicar C√≥digo Backend"
        condition: succeeded()

  - job: BuildFrontend
    displayName: "üî® Build Frontend"
    steps:
      - script: |
          echo "üì¶ Instalando dependencias del frontend..."
          npm install
        displayName: 'üì¶ Instalar Dependencias Frontend'
        workingDirectory: 'coffehub/frontend'

      # ---- Tests del Frontend ----
      - script: |
          echo "üß™ Ejecutando tests del frontend..."
          npm run test:ci
        displayName: 'üß™ Tests Frontend'
        workingDirectory: 'coffehub/frontend'
        continueOnError: false

      # ---- Publicar Resultados de Tests Frontend ----
      - task: PublishTestResults@2
        displayName: 'üìã Publicar Resultados Tests Frontend'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit.xml'
          searchFolder: 'coffehub/frontend'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Frontend Tests'
        condition: succeededOrFailed()

      # ---- Publicar Coverage Frontend ----
      - task: PublishCodeCoverageResults@1
        displayName: 'üìä Publicar Code Coverage Frontend'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'coffehub/frontend/coverage/cobertura-coverage.xml'
          reportDirectory: 'coffehub/frontend/coverage'
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/frontend'
          artifact: 'frontend-code'
        displayName: "üì¶ Publicar C√≥digo Frontend"
        condition: succeeded()


# ==================== STAGE 2: DEPLOY QA ====================
- stage: Deploy_QA
  displayName: "CD: Desplegar QA + Smoke Tests"
  dependsOn: Build_And_Test
  condition: succeeded()
  jobs:
  - deployment: DeployQA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
            # ---- Backend QA ----
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source' 

            - task: AzureWebApp@1
              displayName: "üöÄ Deploy Backend QA"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameQA)'
                package: '$(Pipeline.Workspace)/backend-source'
                runtimeStack: 'NODE|18-lts'
                startUpCommand: 'npm install && npm start'

            # ---- Configurar MongoDB QA (NOMBRE CORREGIDO) ----
            - task: AzureCLI@2
              displayName: '‚öôÔ∏è Configurar Variables Backend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_APP='$(backendAppNameQA)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  
                  # Verificar que la variable existe
                  if [ -z "$(MONGO_URI_QA)" ]; then
                    echo "‚ùå ERROR: MONGO_URI_QA est√° vac√≠a!"
                    echo "‚ö†Ô∏è Verifica que existe en el Variable Group 'CoffeeHub-Secrets'"
                    exit 1
                  fi
                  
                  echo "‚û°Ô∏è Configurando variables en $BACKEND_APP"
                  az webapp config appsettings set \
                    --name "$BACKEND_APP" \
                    --resource-group "$RG" \
                    --settings \
                      MONGODB_URI="$(MONGO_URI_QA)" \
                      NODE_ENV="qa"
                  
                  echo "‚úÖ Variables configuradas correctamente"

            # ---- Reiniciar Backend QA para aplicar cambios ----
            - task: AzureCLI@2
              displayName: 'üîÑ Reiniciar Backend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_APP='$(backendAppNameQA)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "üîÑ Reiniciando $BACKEND_APP..."
                  az webapp restart --name "$BACKEND_APP" --resource-group "$RG"
                  echo "‚è≥ Esperando 30 segundos para que la app inicie..."
                  sleep 30
                  echo "‚úÖ Reinicio completado"

            # ---- Frontend QA ----
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "üöÄ Deploy Frontend QA"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameQA)'
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'
                startUpCommand: 'npm install && npm start'

            # ---- Configurar Frontend QA ----
            - task: AzureCLI@2
              displayName: '‚öôÔ∏è Configurar Variables Frontend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_URL_VAL="https://coffehub-backend-qa-g7d7aehuf3avgucz.brazilsouth-01.azurewebsites.net"
                  FRONTEND_APP='$(frontendAppNameQA)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "‚û°Ô∏è Configurando BACKEND_URL en $FRONTEND_APP"
                  az webapp config appsettings set \
                    --name "$FRONTEND_APP" \
                    --resource-group "$RG" \
                    --settings BACKEND_URL="$BACKEND_URL_VAL"

            # ---- Configurar CORS QA ----
            - task: AzureCLI@2
              displayName: '‚öôÔ∏è Configurar CORS en Backend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  FRONTEND_URL_VAL="https://coffehub-front-qa-a5cvgbfkhbf7huep.brazilsouth-01.azurewebsites.net"
                  BACKEND_APP='$(backendAppNameQA)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "‚û°Ô∏è Configurando CORS para $FRONTEND_URL_VAL"
                  az webapp cors add \
                    --name "$BACKEND_APP" \
                    --resource-group "$RG" \
                    --allowed-origins "$FRONTEND_URL_VAL"

            # ---- Smoke Tests QA (MEJORADO CON RETRY) ----
            - script: |
                echo "üîç Ejecutando Smoke Tests en QA..."
                echo "‚è≥ Esperando 60 segundos adicionales para que el backend inicie completamente..."
                sleep 60
                
                BACKEND_URL="https://coffehub-backend-qa-g7d7aehuf3avgucz.brazilsouth-01.azurewebsites.net"
                MAX_RETRIES=5
                RETRY_COUNT=0
                
                echo ""
                echo "Testing /api/health..."
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                  echo "üîÑ Intento $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                  
                  response=$(curl -s -w "\n%{http_code}" "$BACKEND_URL/api/health" || echo -e "\n000")
                  http_code=$(echo "$response" | tail -n1)
                  body=$(echo "$response" | head -n-1)
                  
                  echo "üì° Response Code: $http_code"
                  echo "üìÑ Response Body: $body"
                  
                  if [ "$http_code" -eq 200 ]; then
                    echo "‚úÖ Health check passed!"
                    break
                  else
                    echo "‚ö†Ô∏è Status: $http_code (esperado: 200)"
                    RETRY_COUNT=$((RETRY_COUNT + 1))
                    if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                      echo "‚è≥ Esperando 15 segundos antes de reintentar..."
                      sleep 15
                    fi
                  fi
                done
                
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "‚ùå Health check fall√≥ despu√©s de $MAX_RETRIES intentos"
                  exit 1
                fi
                
                echo ""
                echo "Testing /api/products..."
                response=$(curl -s -w "\n%{http_code}" "$BACKEND_URL/api/products")
                http_code=$(echo "$response" | tail -n1)
                body=$(echo "$response" | head -n-1)
                
                echo "üì° Response Code: $http_code"
                echo "üìÑ Response Body: $body"
                
                if [ "$http_code" -eq 200 ]; then
                  echo "‚úÖ Products endpoint passed!"
                else
                  echo "‚ùå Products endpoint failed! Status: $http_code"
                  exit 1
                fi
                
                echo ""
                echo "üéâ Todos los smoke tests de QA pasaron exitosamente!"
              displayName: 'üîç Smoke Tests QA (Con Retry)'
              continueOnError: false


# ==================== STAGE 3: DEPLOY PROD ====================
- stage: Deploy_PROD
  displayName: "CD: Desplegar Producci√≥n + Verificaci√≥n"
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - deployment: DeployPROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            # ---- Backend PROD ----
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source'

            - task: AzureWebApp@1
              displayName: "üöÄ Deploy Backend PROD"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameProd)'
                package: '$(Pipeline.Workspace)/backend-source'
                runtimeStack: 'NODE|18-lts'
                startUpCommand: 'npm install && npm start'

            # ---- Configurar MongoDB PROD (NOMBRE CORREGIDO) ----
            - task: AzureCLI@2
              displayName: '‚öôÔ∏è Configurar Variables Backend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_APP='$(backendAppNameProd)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  
                  # Verificar que la variable existe
                  if [ -z "$(MONGO_URI_PROD)" ]; then
                    echo "‚ùå ERROR: MONGO_URI_PROD est√° vac√≠a!"
                    echo "‚ö†Ô∏è Verifica que existe en el Variable Group 'CoffeeHub-Secrets'"
                    exit 1
                  fi
                  
                  echo "‚û°Ô∏è Configurando variables en $BACKEND_APP"
                  az webapp config appsettings set \
                    --name "$BACKEND_APP" \
                    --resource-group "$RG" \
                    --settings \
                      MONGODB_URI="$(MONGO_URI_PROD)" \
                      NODE_ENV="production"
                  
                  echo "‚úÖ Variables configuradas correctamente"

            # ---- Reiniciar Backend PROD ----
            - task: AzureCLI@2
              displayName: 'üîÑ Reiniciar Backend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_APP='$(backendAppNameProd)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "üîÑ Reiniciando $BACKEND_APP..."
                  az webapp restart --name "$BACKEND_APP" --resource-group "$RG"
                  echo "‚è≥ Esperando 30 segundos para que la app inicie..."
                  sleep 30
                  echo "‚úÖ Reinicio completado"

            # ---- Configurar CORS PROD ----
            - task: AzureCLI@2
              displayName: '‚öôÔ∏è Configurar CORS en Backend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  FRONTEND_URL_VAL="https://coffehub-front-prod-fvhhcggshqf8hygq.brazilsouth-01.azurewebsites.net"
                  BACKEND_APP='$(backendAppNameProd)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "‚û°Ô∏è Configurando CORS en $BACKEND_APP"
                  az webapp cors add \
                    --name "$BACKEND_APP" \
                    --resource-group "$RG" \
                    --allowed-origins "$FRONTEND_URL_VAL"

            # ---- Frontend PROD ----
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "üöÄ Deploy Frontend PROD"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameProd)'
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'
                startUpCommand: 'npm install && npm start'

            # ---- Configurar Frontend PROD ----
            - task: AzureCLI@2
              displayName: '‚öôÔ∏è Configurar Variables Frontend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_URL_VAL="https://coffehub-backend-prod-e6htdkgjgxevgdge.brazilsouth-01.azurewebsites.net"
                  FRONTEND_APP='$(frontendAppNameProd)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "‚û°Ô∏è Configurando BACKEND_URL en $FRONTEND_APP"
                  az webapp config appsettings set \
                    --name "$FRONTEND_APP" \
                    --resource-group "$RG" \
                    --settings BACKEND_URL="$BACKEND_URL_VAL"

            # ---- Smoke Tests PROD (CON RETRY Y ESPERA) ----
            - script: |
                echo "üîç Ejecutando Smoke Tests en PROD..."
                echo "‚è≥ Esperando 60 segundos adicionales para que el backend inicie completamente..."
                sleep 60
                
                BACKEND_URL="https://coffehub-backend-prod-e6htdkgjgxevgdge.brazilsouth-01.azurewebsites.net"
                MAX_RETRIES=5
                RETRY_COUNT=0
                
                echo ""
                echo "Testing /api/health..."
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                  echo "üîÑ Intento $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                  
                  response=$(curl -s -w "\n%{http_code}" "$BACKEND_URL/api/health" || echo -e "\n000")
                  http_code=$(echo "$response" | tail -n1)
                  body=$(echo "$response" | head -n-1)
                  
                  echo "üì° Response Code: $http_code"
                  echo "üìÑ Response Body: $body"
                  
                  if [ "$http_code" -eq 200 ]; then
                    echo "‚úÖ Health check passed!"
                    break
                  else
                    echo "‚ö†Ô∏è Status: $http_code (esperado: 200)"
                    RETRY_COUNT=$((RETRY_COUNT + 1))
                    if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                      echo "‚è≥ Esperando 15 segundos antes de reintentar..."
                      sleep 15
                    fi
                  fi
                done
                
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "‚ùå Health check fall√≥ despu√©s de $MAX_RETRIES intentos"
                  exit 1
                fi
                
                echo ""
                echo "Testing /api/products..."
                response=$(curl -s -w "\n%{http_code}" "$BACKEND_URL/api/products")
                http_code=$(echo "$response" | tail -n1)
                body=$(echo "$response" | head -n-1)
                
                echo "üì° Response Code: $http_code"
                echo "üìÑ Response Body: $body"
                
                if [ "$http_code" -eq 200 ]; then
                  echo "‚úÖ Products endpoint passed!"
                else
                  echo "‚ùå Products endpoint failed! Status: $http_code"
                  exit 1
                fi
                
                echo ""
                echo "üéâ Deployment a PROD completado exitosamente!"
              displayName: 'üîç Smoke Tests PROD (Con Retry)'
              continueOnError: false